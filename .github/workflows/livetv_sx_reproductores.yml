name: üéØ Extractor LiveTV.sx Reproductores Premium

on:
  schedule:
    # Ejecutar cada 6 horas
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      limite_eventos:
        description: 'N√∫mero m√°ximo de eventos a procesar (1-500)'
        required: false
        default: '50'
        type: string
      workers:
        description: 'N√∫mero de hilos paralelos (1-10)'
        required: false
        default: '3'
        type: string
      disable_cache:
        description: 'Deshabilitar cache de URLs'
        required: false
        default: false
        type: boolean

# Permisos expl√≠citos necesarios
permissions:
  contents: write
  actions: read
  pages: read
  deployments: read

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  validar-parametros:
    name: üîç Validar Par√°metros
    runs-on: ubuntu-latest
    outputs:
      limite: ${{ steps.validate.outputs.limite }}
      workers: ${{ steps.validate.outputs.workers }}
      cache_flag: ${{ steps.validate.outputs.cache_flag }}
    
    steps:
    - name: Validar entradas
      id: validate
      run: |
        # Validar l√≠mite de eventos
        LIMITE="${{ github.event.inputs.limite_eventos || '50' }}"
        if ! [[ "$LIMITE" =~ ^[0-9]+$ ]] || [ "$LIMITE" -lt 1 ] || [ "$LIMITE" -gt 500 ]; then
          echo "‚ùå Error: l√≠mite_eventos debe ser un n√∫mero entre 1 y 500"
          exit 1
        fi
        
        # Validar workers
        WORKERS="${{ github.event.inputs.workers || '3' }}"
        if ! [[ "$WORKERS" =~ ^[0-9]+$ ]] || [ "$WORKERS" -lt 1 ] || [ "$WORKERS" -gt 10 ]; then
          echo "‚ùå Error: workers debe ser un n√∫mero entre 1 y 10"
          exit 1
        fi
        
        # Configurar cache
        CACHE_FLAG=""
        if [ "${{ github.event.inputs.disable_cache }}" = "true" ]; then
          CACHE_FLAG="--no-cache"
        fi
        
        echo "limite=$LIMITE" >> $GITHUB_OUTPUT
        echo "workers=$WORKERS" >> $GITHUB_OUTPUT
        echo "cache_flag=$CACHE_FLAG" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Par√°metros validados:"
        echo "   - L√≠mite de eventos: $LIMITE"
        echo "   - Workers: $WORKERS"
        echo "   - Cache: $([ -z "$CACHE_FLAG" ] && echo "Habilitado" || echo "Deshabilitado")"

  extraer-reproductores:
    name: üé¨ Extraer Reproductores
    runs-on: ubuntu-latest
    needs: validar-parametros
    timeout-minutes: 120
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: üêç Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: üì¶ Configurar cache de dependencias
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: ‚ö° Instalar dependencias optimizadas
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install --no-cache-dir \
          requests==2.31.0 \
          beautifulsoup4==4.12.2 \
          lxml==4.9.3 \
          urllib3==2.0.7
        
        # Verificar instalaci√≥n
        python -c "
        import requests, bs4, lxml
        print('‚úÖ Todas las dependencias instaladas correctamente')
        print(f'   - requests: {requests.__version__}')
        print(f'   - beautifulsoup4: {bs4.__version__}')
        print(f'   - lxml: {lxml.__version__}')
        "
        
    - name: üîß Preparar entorno de ejecuci√≥n
      run: |
        # Crear directorio de salida
        mkdir -p output
        
        # Configurar l√≠mites del sistema
        ulimit -n 4096
        
        # Mostrar informaci√≥n del sistema
        echo "üìä Informaci√≥n del sistema:"
        echo "   - OS: $(uname -a)"
        echo "   - Python: $(python --version)"
        echo "   - CPU cores: $(nproc)"
        echo "   - RAM: $(free -h | grep Mem | awk '{print $2}')"
        echo "   - Disk: $(df -h / | tail -1 | awk '{print $4}' | sed 's/G/ GB/')"
        
    - name: üöÄ Ejecutar extractor premium
      run: |
        echo "üéØ Iniciando extracci√≥n con par√°metros:"
        echo "   - L√≠mite: ${{ needs.validar-parametros.outputs.limite }}"
        echo "   - Workers: ${{ needs.validar-parametros.outputs.workers }}"
        echo "   - Cache: $([ -n "${{ needs.validar-parametros.outputs.cache_flag }}" ] && echo "Deshabilitado" || echo "Habilitado")"
        echo ""
        
        # Ejecutar con timeout y manejo de errores
        timeout 6000 python script_lista_livetv_sx_reproductores.py \
          ${{ needs.validar-parametros.outputs.limite }} \
          --workers ${{ needs.validar-parametros.outputs.workers }} \
          ${{ needs.validar-parametros.outputs.cache_flag }} \
        || {
          EXIT_CODE=$?
          if [ $EXIT_CODE -eq 124 ]; then
            echo "‚è∞ Extracci√≥n interrumpida por timeout (100 minutos)"
          else
            echo "‚ùå Error en la extracci√≥n (c√≥digo: $EXIT_CODE)"
          fi
          exit $EXIT_CODE
        }
        
    - name: üìä Mostrar resultados preliminares
      if: always()
      run: |
        echo "üìã RESULTADOS PRELIMINARES:"
        echo "=========================="
        
        if [ -f output/livetv_detailed_report.json ]; then
          echo "‚úÖ Reporte JSON generado"
          python -c "
          import json
          with open('output/livetv_detailed_report.json', 'r') as f:
              data = json.load(f)
              meta = data.get('metadata', {})
              print(f'üìä Eventos procesados: {meta.get(\"total_eventos\", \"N/A\")}')
              print(f'‚úÖ Extracciones exitosas: {meta.get(\"eventos_exitosos\", \"N/A\")}')
              print(f'üéØ Tasa de √©xito: {meta.get(\"tasa_exito\", \"N/A\")}')
              print(f'üîó Total reproductores: {meta.get(\"total_reproductores\", \"N/A\")}')
          "
        fi
        
        if [ -f output/extraction_detailed_log.txt ]; then
          echo -e "\nüìÑ Primeras l√≠neas del log:"
          head -20 output/extraction_detailed_log.txt
        fi
        
        echo -e "\nüìÅ Archivos generados:"
        ls -la output/ 2>/dev/null || echo "‚ùå No se generaron archivos"
        
    - name: üîç Validar calidad de resultados
      if: success()
      run: |
        python -c "
        import json, sys
        
        try:
            with open('output/livetv_detailed_report.json', 'r') as f:
                data = json.load(f)
                meta = data.get('metadata', {})
                
            total = meta.get('total_eventos', 0)
            exitosos = meta.get('eventos_exitosos', 0)
            reproductores = meta.get('total_reproductores', 0)
            
            if total == 0:
                print('‚ùå Error: No se procesaron eventos')
                sys.exit(1)
                
            tasa_exito = (exitosos / total) * 100 if total > 0 else 0
            
            print(f'üìä Calidad de resultados:')
            print(f'   - Tasa de √©xito: {tasa_exito:.1f}%')
            print(f'   - Promedio reproductores: {reproductores/exitosos:.1f}' if exitosos > 0 else '   - Promedio reproductores: 0')
            
            # Validaciones de calidad
            if tasa_exito < 10:
                print('‚ö†Ô∏è Advertencia: Tasa de √©xito muy baja')
            elif tasa_exito >= 50:
                print('‚úÖ Excelente tasa de √©xito')
            else:
                print('‚úÖ Tasa de √©xito aceptable')
                
        except Exception as e:
            print(f'‚ùå Error validando resultados: {e}')
            sys.exit(1)
        "
        
    - name: üì¶ Crear archivo comprimido
      if: success()
      run: |
        cd output
        
        # Crear timestamp para el archivo
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        
        # Comprimir todos los archivos
        tar -czf "../livetv_reproductores_${TIMESTAMP}.tar.gz" ./*
        
        echo "‚úÖ Archivo comprimido creado: livetv_reproductores_${TIMESTAMP}.tar.gz"
        ls -lh "../livetv_reproductores_${TIMESTAMP}.tar.gz"
        
    - name: üì§ Subir artefactos (CORREGIDO)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: reproductores-livetv-${{ github.run_number }}
        path: |
          output/
          livetv_reproductores_*.tar.gz
          extractor.log
        retention-days: 30
        compression-level: 6
        
    - name: üíæ Commit resultados a rama dedicada
      if: github.event_name == 'schedule' && success()
      run: |
        # Configurar Git
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "GitHub Actions Bot"
        git config --local pull.rebase true
        
        # Informaci√≥n del commit
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
        COMMIT_MSG="ü§ñ Actualizar reproductores LiveTV.sx - $TIMESTAMP"
        
        echo "üìù Preparando commit: $COMMIT_MSG"
        
        # Intentar cambiar a rama de resultados
        git fetch origin || true
        
        if git rev-parse --verify origin/resultados-reproductores >/dev/null 2>&1; then
          echo "‚úÖ Rama 'resultados-reproductores' existe, cambiando..."
          git checkout -B resultados-reproductores origin/resultados-reproductores
          git pull origin resultados-reproductores --rebase || {
            echo "‚ö†Ô∏è Error en pull, resolviendo conflictos..."
            git rebase --abort || true
            git reset --hard origin/resultados-reproductores
          }
        else
          echo "üÜï Creando nueva rama 'resultados-reproductores'..."
          git checkout -b resultados-reproductores
        fi
        
        # Preparar directorio de datos
        mkdir -p reproductores_data/latest
        mkdir -p reproductores_data/historical
        
        # Copiar archivos generados
        cp -r output/* reproductores_data/latest/ 2>/dev/null || true
        
        # Crear archivo de hist√≥rico con timestamp
        HISTORICAL_DIR="reproductores_data/historical/$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$HISTORICAL_DIR"
        cp -r output/* "$HISTORICAL_DIR/" 2>/dev/null || true
        
        # Crear √≠ndice README actualizado
        cat > reproductores_data/README.md << EOF
        # üì° LiveTV.sx Reproductores Extra√≠dos
        
        ## üìä √öltima Extracci√≥n
        - **Fecha**: $TIMESTAMP
        - **Archivos**: \`latest/\`
        - **Hist√≥rico**: \`historical/\`
        
        ## üìÅ Estructura
        - \`latest/\` - √öltima extracci√≥n realizada
        - \`historical/\` - Archivo hist√≥rico de extracciones
        
        ## üîÑ Actualizaci√≥n Autom√°tica
        Este repositorio se actualiza autom√°ticamente cada 6 horas mediante GitHub Actions.
        
        ---
        *Generado autom√°ticamente por GitHub Actions*
        EOF
        
        # A√±adir cambios
        git add reproductores_data/
        
        # Verificar si hay cambios para commitear
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No hay cambios nuevos para commitear"
        else
          echo "üíæ Commiteando cambios..."
          git commit -m "$COMMIT_MSG"
          
          # Intentar push con reintentos
          for i in {1..3}; do
            if git push origin resultados-reproductores; then
              echo "‚úÖ Push exitoso en intento $i"
              break
            else
              echo "‚ö†Ô∏è Error en push, intento $i/3"
              if [ $i -lt 3 ]; then
                sleep 5
                git pull origin resultados-reproductores --rebase || true
              fi
            fi
          done
        fi

  post-procesamiento:
    name: üìà Post-procesamiento y Notificaci√≥n
    needs: [validar-parametros, extraer-reproductores]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üì• Descargar artefactos
      if: needs.extraer-reproductores.result != 'skipped'
      uses: actions/download-artifact@v4
      with:
        name: reproductores-livetv-${{ github.run_number }}
        path: resultados/
        
    - name: üìä An√°lisis final de resultados
      if: needs.extraer-reproductores.result == 'success'
      run: |
        echo "üéâ AN√ÅLISIS FINAL DE RESULTADOS"
        echo "=============================="
        
        cd resultados
        
        if [ -f livetv_detailed_report.json ]; then
          echo "üìã Generando reporte final..."
          python3 -c "
          import json
          from datetime import datetime
          
          with open('livetv_detailed_report.json', 'r') as f:
              data = json.load(f)
              meta = data.get('metadata', {})
              
          print('üìä ESTAD√çSTICAS FINALES:')
          print('========================')
          print(f'Total eventos procesados: {meta.get(\"total_eventos\", \"N/A\")}')
          print(f'Extracciones exitosas: {meta.get(\"eventos_exitosos\", \"N/A\")}')
          print(f'Tasa de √©xito: {meta.get(\"tasa_exito\", \"N/A\")}')
          print(f'Total reproductores: {meta.get(\"total_reproductores\", \"N/A\")}')
          print(f'Promedio por evento: {meta.get(\"promedio_reproductores\", \"N/A\")}')
          print(f'Peticiones realizadas: {meta.get(\"total_requests\", \"N/A\")}')
          
          tipos = meta.get('tipos_streams', {})
          if tipos:
              print('\nüé¨ TIPOS DE STREAMS:')
              print('===================')
              for tipo, count in tipos.items():
                  print(f'{tipo}: {count}')
          "
        fi
        
        echo -e "\nüìÅ Archivos generados:"
        ls -la
        
    - name: üîî Estado final y notificaci√≥n
      run: |
        echo "üì¢ ESTADO FINAL DEL WORKFLOW"
        echo "============================="
        
        # Determinar estado general
        if [ "${{ needs.extraer-reproductores.result }}" == "success" ]; then
          echo "‚úÖ √âXITO: Extracci√≥n de reproductores completada exitosamente"
          echo ""
          echo "üéØ Resultados disponibles:"
          echo "   ‚Ä¢ Artefactos: reproductores-livetv-${{ github.run_number }}"
          echo "   ‚Ä¢ Rama: resultados-reproductores (si es ejecuci√≥n programada)"
          echo "   ‚Ä¢ Retenci√≥n: 30 d√≠as"
          echo ""
          echo "üìä Par√°metros utilizados:"
          echo "   ‚Ä¢ L√≠mite de eventos: ${{ needs.validar-parametros.outputs.limite }}"
          echo "   ‚Ä¢ Workers paralelos: ${{ needs.validar-parametros.outputs.workers }}"
          echo "   ‚Ä¢ Cache: $([ -n "${{ needs.validar-parametros.outputs.cache_flag }}" ] && echo "Deshabilitado" || echo "Habilitado")"
          
        elif [ "${{ needs.extraer-reproductores.result }}" == "failure" ]; then
          echo "‚ùå ERROR: Fallo en la extracci√≥n de reproductores"
          echo ""
          echo "üîç Pasos para resoluci√≥n:"
          echo "   1. Revisar logs del job 'extraer-reproductores'"
          echo "   2. Verificar conectividad con LiveTV.sx"
          echo "   3. Comprobar formato del XML fuente"
          echo "   4. Validar par√°metros de entrada"
          
        elif [ "${{ needs.extraer-reproductores.result }}" == "cancelled" ]; then
          echo "‚è∏Ô∏è CANCELADO: Extracci√≥n interrumpida"
          echo "   ‚Ä¢ Motivo: Cancelaci√≥n manual o timeout"
          
        else
          echo "‚ö†Ô∏è ESTADO DESCONOCIDO: Verificar logs detallados"
        fi
        
        echo ""
        echo "üîó Enlaces √∫tiles:"
        echo "   ‚Ä¢ Repositorio: ${{ github.server_url }}/${{ github.repository }}"
        echo "   ‚Ä¢ Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "   ‚Ä¢ Artefactos: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts"

# Configuraci√≥n adicional para el workflow
concurrency:
  group: extractor-livetv-${{ github.ref }}
  cancel-in-progress: false
